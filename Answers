Question 1:
    Append - "you can do it with lists but not sets."
    Definite Iteration - "when you loop for a known number of times."
    mutable - "changes the original variable."
    Iteration - "handle a group of things one at a time using a loop."
    Indefinite Iteration - "when you don't know how many times a loop will occur."
    Step Over - "one way of using a debugger, which does not enter into a Function."
    Modulo - "gives the remainder of an integer division."
    Immutable - "can't be modified after being created."
    Scope - "this explains why you can have two variables with the same name but different values."
    Break Point - "used to pause the execution of Python code inside the debugger."


Question 2:
The correct answer is:
B. set(l1 + l2)

Explanation:
    The desired output is a set containing unique elements from both lists l1 and l2.
    Using set(l1 + l2) combines the two lists, removes duplicates, and creates a set with the unique elements from both lists.

The other options don't achieve this:
    A (list(l1).append(l2)) appends l2 as a single item to the list, resulting in a nested list structure.
    C (set(set(l1) + l2)) is invalid syntax as you cannot add a set and a list directly.
    D (list(l2).intersection(l1)) would only give the intersection of the two lists, not the union.

Thus, B is the correct command.


Question 4:
To answer this question, let's break down the code snippet:
'AUTOMATION'[:-4].lower()

    Slicing [:-4]:
        [:-4] takes all characters from the beginning of the string up to (but not including) the last four characters.
        'AUTOMATION'[:-4] results in 'AUTOM'.

    Applying .lower():
        .lower() converts the string to lowercase.
        So, 'AUTOM'.lower() becomes 'autom'.

Final Answer:
The output of the code snippet is:
autom


Question 5:
Let's analyze the code snippet:
'OPEN SOURCE'[-10:4].lower()

    Slicing [-10:4]:
        The string 'OPEN SOURCE' has a length of 10.
        [-10:4] means starting from the 10th character from the end (which is the beginning of the string) up to (but not including) the 4th index.
        'OPEN SOURCE'[-10:4] extracts 'OPEN'.

    Applying .lower():
        Converting 'OPEN' to lowercase results in 'open'.

Final Answer:
The output of the code snippet is:
open



Question 6:
1. Is it a function or a method?
        Answer: method

2. If it is a method, what datatype does it belong to?
        Answer: list

3. What datatype is the first argument?
        Answer: integer (the first argument specifies the index at which to insert)

4. What datatype gets returned?
        Answer: None (the insert() method modifies the list in place and returns None)


Question 7:
The line with the # symbol is:
for c in sentence:  # 

Explanation:
This line is a for loop that iterates over each character c in the sentence string, processing each character one at a time.
In-line Comment:
for c in sentence:  # Iterate over each character in the sentence




Question 8:
If you open the Python interpreter and run import ltspk, the following happens:

No Immediate Output:
  The code under if __name__ == "__main__": does not execute, because this block only runs when the script is executed directly, not when it's imported as a module.

Definitions Are Loaded:
  The interpreter loads the definitions in ltspk.py, including the lt_spk function and the test variable, making them available for use.

Usage:
  You can now call the lt_spk function in the interpreter with a string argument if you want to see its output, like ltspk.lt_spk("some sentence").

In summary, importing ltspk will load the function and variables but will not execute the main code block that prints the result.




Question 9:
When the command python3 ./ltspk.py "iS iT" is run, here’s what happens:
    Input Argument:
        The input string provided to the script is "iS iT", which is passed as an argument to the lt_spk function.

    Character Replacement:
        The lt_spk function processes each character in the input string and replaces specific vowels and consonants according to the lookup dictionary:
            i is mapped to 1
            S is mapped to 5
            T is mapped to 7

    Output Calculation:
        Processing "iS iT":
            i → 1
            S → 5
            (space) remains as is
            i → 1
            T → 7
        The final transformed string is "15 17".

    Printing:
        The function first prints result inside lt_spk, so "15 17" will be printed.
        Then, the main block prints y, which also contains "15 17".

Final Output:
15 17
15 17
